{"version":3,"sources":["components/taskapp/main/mainNav.js","components/taskapp/main/myEditor.js","components/taskapp/sidepanel/sidePanel.js","components/taskapp/dropdownFilter/dropdownFilter.js","components/taskapp/tasks/components/navigation.js","components/taskapp/tasks/components/taskList.js","components/taskapp/tasks/components/taskDisplay.js","components/taskapp/tasks/components/tinymce.js","components/taskapp/tasks/taskapp.js","components/taskapp/timer/tagRatings/tagRatings.js","components/taskapp/timer/tagMenu.js","components/taskapp/timer/timerTaskDropdown.js","components/taskapp/dateTimePicker/dateTimePicker.js","components/taskapp/timer/timerListComponent.js","components/taskapp/util.js","components/taskapp/timer/timerTask.js","components/taskapp/timer/timerList.js","components/taskapp/timer/timerNav.js","components/taskapp/timer/timer.js","components/taskapp/main/main.js","components/App.js","index.js"],"names":["MainNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","dropdownOpen","state","clickable","e","number","target","value","toggleNavbar","bind","assertThisInitialized","collapsed","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","Dropdown","size","DropdownToggle","caret","DropdownMenu","NavLink","React","Component","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","getBlockStyle","block","getType","StyleButton","_this2","onToggle","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","editorState","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","map","type","myEditor_StyleButton","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","SidePanel","task","sidePanelFocus","data-sidepanelid","taskName","ProgressBar","bsStyle","now","parseInt","percentComplete","hours","lastUpdated","DropdownFilter","prevState","DropdownItem","header","sortFilter","disabled","divider","Navigation","onSubmit","handleCreateSubTask","onChange","updateSubTaskInput","id","subTaskInput","placeholder","handleCreateNewTag","taskInfo","updateTagInput","tagInput","handleAddHours","updateHoursInput","appState","hoursInput","handleAddNote","updateAddNoteInput","addNoteInput","handleToggleAll","handleDeleteAll","handleDeleteTaskApp","TaskList","tasks","readOnly","checked","onToggleTask","updateTaskInput","text","onFocus","handleFocusTask","handleDeleteSubTask","uuidv4","require","TaskDisplay","tags","tag","focusedTask","TinyMce","handleEditorChange","getContent","handleUpdateTextEditor","es2015","textEditorPrimaryContent","init","plugins","toolbar","Taskapp","componentDidMount","componentDidUpdate","input","Grid","updateTaskTitle","Row","navigation","handleDeleteAllTasks","lib_default","data","shouldExpandNode","tinymce_TinyMce","textEditorContent","textEditorContentTest","taskDisplay","components_taskList","handleToggleTask","TagRatings","console","log","data-toggle","aria-expanded","Badge","dropdownName","TagMenu","handleCreate","tagValue","index","createNewTag","alert","handleDelete","deleteHoursLogTag","popoverOpen","generatePopoverId","split","join","moment","startTime","valueOf","Fragment","length","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","tagRatings_TagRatings","TimerTaskDropdown","handleDeleteHoursLog","deleteHoursLog","DTP","stopTime","_i","modifyHoursLog","time","changeStartTime","date","format","changeStopTime","entry_default","isCalendarOpen","calendarIcon","clearIcon","disableClock","_d","Button","timerListComponent","milisecondsTimeDifference","convertMillisecondsToDigitalClock","tagMenu_TagMenu","createChildHoursLogTag","timeEditable","dateTimePicker_DTP","retrieveComponentTime","data-value","timerTaskDropdown_TimerTaskDropdown","util","dateNow","Date","toISOString","updateLocalStorage","namespace","storedData","localStorage","setItem","JSON","stringify","retrieveTasksFromLocalStorage","parse","getItem","TimerTask","savedState","totalTime","isHidden","toggleList","ms","Math","floor","minutes","seconds","hoursLog","totalMiliseconds","reduce","accumulator","currentValue","hoursLogSortedDescending","sort","b","slice","getAttribute","timeStamp","componentTime","createParentHoursLogTag","deleteParentHoursLogTag","timer_timerListComponent","TimerList","totalTimeMilliseconds","sortedTaskList","taskList","timerTask","TimerNav","updateInput","workingOnInput","optionalTagArray","currentTimer","timeStarted","Timer","calculateCurrentTimer","startOf","interval","window","setInterval","setTimer","timeInSeconds","add","createOptionalTags","currentState","includes","push","deleteOptionalTagArray","taskNameNotRequired","filter","toggleTimer","addHoursLog","createTaskTimeObject","clearInterval","pushTagsFromOptionalTagsArray","trim","lastIndex","find","taskTimeObject","timer","Container","fluid","es_Row","Col","sm","timerNav","timerList","Main","axios","get","then","response","taskListIndex","catch","error","post","toggleMainSection","sortTaskList","filterBy","date1","date2","updateNewTaskInput","inputNewTask","updateInputTaskFilter","inputTaskFilter","createNewTask","optionalHoursObj","concat","taskId","notes","handleCreateNewTask","closest","subTasks","taskIndex","indexOf","newTasks","textObject","updated","newNotes","findHoursLog","hoursLogIndex","filteredTags","currentTask","tagText","filteredHoursLog","taskListItem","hoursLogItem","hoursObj","parseFloat","toFixed","isnum","test","name","inactiveCount","inactiveCounter","forEach","getInactiveCount","currentTaskList","currentTasks","subTaskIndex","subTask","filterByTaskName","runMoment","mainNav_MainNav","timer_Timer","xs","md","dropdownFilter_DropdownFilter","sidePanel","onHandleDeleteTask","taskapp_Taskapp","App","BrowserRouter","Route","path","process","component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e4e4b685.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu\n} from \"reactstrap\";\n\nexport default class MainNav extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true,\n      dropdownOpen: false,\n      number: \"\"\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  toggle = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  };\n\n  clickable = e => {\n    const number = e.target.value;\n    this.setState({\n      number\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"faded\" light expand=\"md\">\n          <NavbarBrand href=\"/\" className=\"mr-auto\">\n            TrackerApp\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n          <Collapse isOpen={!this.state.collapsed} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <Dropdown\n                  isOpen={this.state.dropdownOpen}\n                  size=\"sm\"\n                  toggle={this.toggle}\n                >\n                  <DropdownToggle\n                    // tag=\"span\"\n                    // onClick={this.toggle}\n                    // data-toggle=\"dropdown\"\n                    // aria-expanded={this.state.dropdownOpen}\n                    caret\n                  >\n                    Dropdown\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    <ul>\n                      <li onClick={this.clickable} value={1}>\n                        1\n                      </li>\n                      <li onClick={this.clickable} value={2}>\n                        2\n                      </li>\n                      <li onClick={this.clickable} value={3}>\n                        3\n                      </li>\n                      <li onClick={this.clickable} value={4}>\n                        4\n                      </li>\n                      <li onClick={this.clickable} value={5}>\n                        5\n                      </li>\n                    </ul>\n                    <div onClick={this.toggle}>Custom item</div>\n                  </DropdownMenu>\n                </Dropdown>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/\">link1</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Editor, EditorState, RichUtils, ContentState } from \"draft-js\";\nimport \"./richEditor.css\";\n\nexport default class RichEditorExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createWithContent(\n        ContentState.createFromText(\"Hello\")\n      )\n    };\n\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = editorState => this.setState({ editorState });\n\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n    this.onTab = e => this._onTab(e);\n    this.toggleBlockType = type => this._toggleBlockType(type);\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const { editorState } = this.state;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\n    );\n  }\n\n  render() {\n    const { editorState } = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = \"RichEditor-editor\";\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (\n        contentState\n          .getBlockMap()\n          .first()\n          .getType() !== \"unstyled\"\n      ) {\n        className += \" RichEditor-hidePlaceholder\";\n      }\n    }\n\n    return (\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            onTab={this.onTab}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \"blockquote\":\n      return \"RichEditor-blockquote\";\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = \"RichEditor-styleButton\";\n    if (this.props.active) {\n      className += \" RichEditor-activeButton\";\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  { label: \"H1\", style: \"header-one\" },\n  { label: \"H2\", style: \"header-two\" },\n  { label: \"H3\", style: \"header-three\" },\n  { label: \"H4\", style: \"header-four\" },\n  { label: \"H5\", style: \"header-five\" },\n  { label: \"H6\", style: \"header-six\" },\n  { label: \"Blockquote\", style: \"blockquote\" },\n  { label: \"UL\", style: \"unordered-list-item\" },\n  { label: \"OL\", style: \"ordered-list-item\" },\n  { label: \"Code Block\", style: \"code-block\" }\n];\n\nconst BlockStyleControls = props => {\n  const { editorState } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nvar INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\" },\n  { label: \"Italic\", style: \"ITALIC\" },\n  { label: \"Underline\", style: \"UNDERLINE\" },\n  { label: \"Monospace\", style: \"CODE\" }\n];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nconst SidePanel = props => {\n  const task = props.task;\n  return (\n    <div\n      className={\"task-item \" + props.className}\n      onClick={props.sidePanelFocus}\n      data-sidepanelid={task.taskName}\n    >\n      <div className=\"task-item-content\">\n        <div className=\"task-item-title\">{task.taskName}</div>\n        <div className=\"task-item-summary\">Content Summary Goes Here</div>\n        <ProgressBar>\n          <ProgressBar\n            className=\"task-item-percent-complete\"\n            bsStyle=\"info\"\n            now={parseInt(task.percentComplete)}\n          />\n        </ProgressBar>\n        <div>{task.hours} hours</div>\n        <div className=\"task-item-updated-date\">{task.lastUpdated}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default SidePanel;\n","import React from \"react\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport default class DropdownFilter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  };\n\n  render() {\n    return (\n      <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle caret>Dropdown</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem onClick={() => this.props.sortFilter(\"ascending\")}>\n            Sort Ascending\n          </DropdownItem>\n          <DropdownItem disabled>Action (disabled)</DropdownItem>\n          <DropdownItem divider />\n          <DropdownItem onClick={() => this.props.sortFilter(\"descending\")}>\n            Sort Descending\n          </DropdownItem>\n          <DropdownItem>Bar Action</DropdownItem>\n          <DropdownItem>Quo Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Navigation = props => {\n  return (\n    <nav className=\"task-navigation-container\">\n      <h3>Navigation</h3>\n      <div className=\"task-navigation-form\">\n        <form onSubmit={props.handleCreateSubTask}>\n          <input\n            onChange={props.updateSubTaskInput}\n            id=\"task-text\"\n            value={props.subTaskInput}\n            placeholder=\"add a subtask\"\n          />\n          <input type=\"submit\" value=\"Add Subtask\" />\n        </form>\n        <form onSubmit={props.handleCreateNewTag(props.taskInfo.taskName)}>\n          <input\n            onChange={props.updateTagInput}\n            id=\"add-tag\"\n            value={props.tagInput}\n            placeholder=\"Add a tag\"\n          />\n          <input type=\"submit\" value=\"Add Tag\" />\n        </form>\n        <form onSubmit={props.handleAddHours(props.taskInfo.taskName)}>\n          <input\n            onChange={props.updateHoursInput}\n            id=\"add-hours\"\n            value={props.appState.hoursInput}\n            placeholder=\"Add Hours\"\n          />\n          <input type=\"submit\" value=\"Add Hours\" />\n        </form>\n        <form onSubmit={props.handleAddNote(props.taskInfo.taskName)}>\n          <input\n            onChange={props.updateAddNoteInput}\n            id=\"add-note\"\n            value={props.appState.addNoteInput}\n            placeholder=\"Add Note\"\n          />\n          <input type=\"submit\" />\n        </form>\n      </div>\n      <div className=\"task-navigation-buttons\">\n        <button onClick={props.handleToggleAll}>Toggle All</button>\n        <button onClick={props.handleDeleteAll}>Delete All</button>\n        <button onClick={props.handleDeleteTaskApp}>Delete Task</button>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst TaskList = props => {\n  if (props.tasks) {\n    return (\n      <div className=\"tasks_list\">\n        <ul>\n          {props.tasks.map(task => {\n            return (\n              <li\n                className={\n                  task.active === true ? \"task_active\" : \"task_inactive\"\n                }\n                key={task.id}\n                id={task.id}\n              >\n                <input\n                  readOnly\n                  type=\"checkbox\"\n                  checked={!task.active}\n                  onClick={() => props.onToggleTask(task.id)}\n                />\n                <input\n                  onChange={props.updateTaskInput}\n                  value={task.text}\n                  onFocus={props.handleFocusTask}\n                />\n                <button onClick={() => props.handleDeleteSubTask(task.text)}>\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  } else {\n    return <div>No TaskList</div>;\n  }\n};\n\nexport default TaskList;\n","import React from \"react\";\nconst uuidv4 = require(\"uuid/v4\");\n\nconst TaskDisplay = props => {\n  return (\n    <div className=\"task_display\">\n      <h4>Display</h4>\n      <span>\n        {props.tags\n          ? props.tags.map(tag => {\n              return <button key={uuidv4()}>{tag}</button>;\n            })\n          : \"no tags\"}\n      </span>\n      <span>{props.focusedTask.text}</span>\n    </div>\n  );\n};\n\nexport default TaskDisplay;\n","import React from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\nexport default class TinyMce extends React.Component {\n  handleEditorChange = e => {\n    const text = e.target.getContent();\n    const taskName = this.props.taskInfo.taskName;\n    this.props.handleUpdateTextEditor(taskName, text);\n  };\n\n  render() {\n    return (\n      <Editor\n        value={this.props.textEditorPrimaryContent}\n        init={{\n          plugins: \"link image code\",\n          toolbar:\n            \"undo redo | bold italic | alignleft aligncenter alignright | code\"\n        }}\n        onChange={this.handleEditorChange}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Navigation from \"./components/navigation\";\nimport TaskList from \"./components/taskList\";\nimport TaskDisplay from \"./components/taskDisplay\";\nimport TinyMce from \"./components/tinymce\";\nimport { Grid, Row } from \"react-bootstrap\";\nimport JSONTree from \"react-json-tree\";\n\nexport default class Taskapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      tagInput: \"\",\n      focusedTask: {},\n      tasks: []\n      /*************************************\n      task object structure\n      tasks: [\n        {\n          text:'first task',\n          active: true,\n          id: uuidv4()\n        },\n      ]\n      **************************************/\n    };\n  }\n  componentDidMount = () => {};\n\n  componentDidUpdate = () => {};\n\n  render() {\n    return (\n      <Grid className=\"tasks_container\">\n        {/* <h1 className='taskapp-header'>{this.props.taskInfo.taskName}</h1> */}\n        <input\n          onChange={this.props.updateTaskTitle}\n          id=\"task-text\"\n          value={this.props.taskInfo.taskName}\n          placeholder=\"add a subtask\"\n        />\n        <Row>\n          {/* <BarChart /> */}\n          <Navigation\n            appState={this.props.appState}\n            taskInfo={this.props.taskInfo}\n            tagInput={this.props.tagInput}\n            updateTagInput={this.props.updateTagInput}\n            handleCreateSubTask={this.props.handleCreateSubTask}\n            subTaskInput={this.props.subTaskInput}\n            updateSubTaskInput={this.props.updateSubTaskInput}\n            handleToggleAll={this.props.handleToggleAll}\n            handleDeleteAll={this.props.handleDeleteAllTasks}\n            handleDeleteTaskApp={this.props.handleDeleteTaskApp}\n            handleCreateNewTag={this.props.handleCreateNewTag}\n            hoursInput={this.props.hoursInput}\n            updateHoursInput={this.props.updateHoursInput}\n            handleAddHours={this.props.handleAddHours}\n            updateAddNoteInput={this.props.updateAddNoteInput}\n            handleAddNote={this.props.handleAddNote}\n          />\n        </Row>\n        <Row>\n          <JSONTree data={this.props.taskInfo} shouldExpandNode={() => false} />\n        </Row>\n        <Row>\n          <TinyMce\n            taskInfo={this.props.taskInfo}\n            textEditorContent={this.props.appState.textEditorContentTest}\n            handleUpdateTextEditor={this.props.handleUpdateTextEditor}\n            textEditorPrimaryContent={this.props.textEditorContent}\n          />\n        </Row>\n        <Row>\n          <TaskDisplay\n            focusedTask={this.props.focusedTask}\n            tags={this.props.taskInfo.tags}\n          />\n        </Row>\n        <Row>\n          <h4>Subtasks</h4>\n          <TaskList\n            tasks={this.props.tasks}\n            updateTaskInput={this.props.updateTaskInput}\n            onToggleTask={this.props.handleToggleTask}\n            handleDeleteSubTask={this.props.handleDeleteSubTask}\n            handleFocusTask={this.props.handleFocusTask}\n          />\n        </Row>\n      </Grid>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./tagRatings.css\";\nimport { Badge, Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\";\n\nexport default class TagRatings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true,\n      dropdownOpen: false,\n      number: \"\"\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  toggle = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  };\n\n  clickable = e => {\n    console.log(\"e.target.value\", e.target.value);\n    const number = e.target.value;\n    this.setState({\n      number,\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Dropdown\n          isOpen={this.state.dropdownOpen}\n          size=\"sm\"\n          toggle={this.toggle}\n        >\n          <DropdownToggle\n            tag=\"span\"\n            onClick={this.toggle}\n            data-toggle=\"dropdown\"\n            aria-expanded={this.state.dropdownOpen}\n          >\n            <Badge color=\"success\">{this.props.dropdownName}</Badge>\n          </DropdownToggle>\n          <DropdownMenu>\n            <ul className=\"tag-ratings-dropdown\">\n              <li onClick={this.clickable} value={1}>\n                1\n              </li>\n              <li onClick={this.clickable} value={2}>\n                2\n              </li>\n              <li onClick={this.clickable} value={3}>\n                3\n              </li>\n              <li onClick={this.clickable} value={4}>\n                4\n              </li>\n              <li onClick={this.clickable} value={5}>\n                5\n              </li>\n            </ul>\n          </DropdownMenu>\n        </Dropdown>\n      </div>\n    );\n  }\n}\n\nTagRatings.propTypes = {\n  dropdownName: PropTypes.string\n};\n","import React from \"react\";\nimport moment from \"moment\";\nimport { UncontrolledPopover, PopoverHeader, PopoverBody } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport TagRatings from \"./tagRatings/tagRatings\";\n\nexport default class TagMenu extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      popoverOpen: false,\n      tagInput: \"\"\n    };\n  }\n\n  componentDidMount = () => {};\n\n  componentDidUpdate = () => {};\n\n  handleCreate = (taskName, tagValue, index) => e => {\n    e.preventDefault();\n    if (tagValue !== \"\") {\n      this.props.createNewTag(taskName, tagValue, index);\n      this.setState({ tagInput: \"\" });\n    } else {\n      alert(\"please input a tag\");\n    }\n  };\n\n  handleDelete = (taskName, tagValue, index) => e => {\n    e.preventDefault();\n    this.props.deleteHoursLogTag(taskName, tagValue, index);\n  };\n\n  updateTagInput = e => {\n    const value = e.target.value;\n    this.setState({\n      tagInput: value\n    });\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({\n      popoverOpen: !prevState.popoverOpen\n    }));\n  };\n\n  //requires taskName and startTime in miliseconds\n  generatePopoverId = () => {\n    const splitTaskName = this.props.taskName.split(\" \");\n    const joinTaskName = splitTaskName.join(\"-\");\n    const startTime = moment(this.props.startTime).valueOf();\n    const popoverId = \"Popover-\" + joinTaskName + \"-\" + startTime;\n    return popoverId;\n  };\n\n  render() {\n    return (\n      <>\n        <i\n          className={\n            this.props.tags.length > 0\n              ? \"fas fa-tags tags-active mr-2\"\n              : \"fas fa-tag tags-inactive mr-2\"\n          }\n          id={this.generatePopoverId()}\n        />\n        <UncontrolledPopover\n          trigger=\"legacy\"\n          placement=\"left\"\n          target={this.generatePopoverId()}\n        >\n          <PopoverHeader>Tags</PopoverHeader>\n          <PopoverBody className=\"tags-popover-body\">\n            <form\n              onSubmit={this.handleCreate(\n                this.props.taskName,\n                this.state.tagInput,\n                this.props.index\n              )}\n            >\n              <input\n                onChange={this.updateTagInput}\n                placeholder=\"add/filter tags\"\n                value={this.state.tagInput}\n              />\n              <input type=\"submit\" value=\"submit\" />\n            </form>\n            {typeof this.props.tags !== \"undefined\"\n              ? this.props.tags.map(tag => {\n                  return (\n                    <div className=\"tag-menu-badge\" key={\"tag-badge-\" + tag}>\n                      <TagRatings dropdownName={tag} />\n                      {/* <Badge color='success'>{tag}</Badge> */}\n                      <i\n                        className=\"fas fa-times ml-1\"\n                        onClick={this.handleDelete(\n                          this.props.taskName,\n                          tag,\n                          this.props.index\n                        )}\n                      />\n                    </div>\n                  );\n                })\n              : null}\n          </PopoverBody>\n        </UncontrolledPopover>\n      </>\n    );\n  }\n}\n\nTagMenu.propTypes = {\n  taskName: PropTypes.string,\n  tags: PropTypes.array,\n  startTime: PropTypes.object, //moment object\n  index: PropTypes.number,\n  createNewTag: PropTypes.func //requires (taskName, tagValue, index)\n};\n","import React from \"react\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport default class TimerTaskDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  };\n\n  handleDeleteHoursLog = () => {\n    this.props.deleteHoursLog(this.props.taskName, this.props.startTime);\n    // if(window.confirm('please confirm you want to delete, deletion is irreversible')){\n    //   console.log('you confirmed deletion')\n    //   this.props.deleteHoursLog(this.props.taskName, this.props.startTime)\n    // } else { console.log('you backed out just in time')}\n  };\n\n  render() {\n    return (\n      <Dropdown isOpen={this.state.dropdownOpen} size=\"sm\" toggle={this.toggle}>\n        <DropdownToggle\n          // tag=\"span\"\n          // onClick={this.toggle}\n          // data-toggle=\"dropdown\"\n          // aria-expanded={this.state.dropdownOpen}\n          caret\n        >\n          Menu\n        </DropdownToggle>\n        <DropdownMenu>\n          {/* <div onClick={this.toggle}>Custom item</div> */}\n          <DropdownItem onClick={this.handleDeleteHoursLog}>\n            Delete Time\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport moment from \"moment\";\nimport { Button } from \"reactstrap\";\n\nexport default class DTP extends Component {\n  state = {\n    startTime: \"\",\n    stopTime: \"\"\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      startTime: this.props.startTime._i,\n      stopTime: this.props.stopTime._i\n    });\n  };\n\n  modifyHoursLog = () => {\n    const time = {\n      startTime: this.state.startTime,\n      stopTime: this.state.stopTime\n    };\n    this.props.modifyHoursLog(this.props.taskName, time, this.props.index);\n  };\n\n  changeStartTime = date => {\n    this.setState({ startTime: moment(date).format() });\n  };\n  changeStopTime = date => {\n    this.setState({ stopTime: moment(date).format() });\n  };\n\n  render() {\n    return (\n      <div className=\"dtp-picker\">\n        <DateTimePicker\n          isCalendarOpen={false}\n          calendarIcon={null}\n          clearIcon={null}\n          disableClock={true}\n          onChange={this.changeStartTime}\n          value={this.props.startTime._d}\n        />\n        <DateTimePicker\n          isCalendarOpen={false}\n          calendarIcon={null}\n          clearIcon={null}\n          disableClock={true}\n          onChange={this.changeStopTime}\n          value={this.props.stopTime._d}\n        />\n        <Button onClick={this.modifyHoursLog}>update time</Button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport TagMenu from \"./tagMenu\";\nimport TimerTaskDropdown from \"./timerTaskDropdown\";\nimport DTP from \"../dateTimePicker/dateTimePicker\";\nimport moment from \"moment\";\n\nconst timerListComponent = props => {\n  const { log, index, task } = props;\n  const startTime = moment(log.startTime);\n  const stopTime = moment(log.stopTime);\n  const milisecondsTimeDifference = props.convertMillisecondsToDigitalClock(\n    stopTime.valueOf() - startTime.valueOf()\n  );\n  return (\n    <li\n      key={task.taskName + \"-\" + log.startTime}\n      className=\"timer-list-container\"\n    >\n      <div className=\"time-section\">\n        <div className=\"timer-list-tag-menu\">\n          <TagMenu\n            taskName={task.taskName}\n            tags={log.tags}\n            startTime={startTime}\n            index={index}\n            createNewTag={props.createChildHoursLogTag}\n            deleteHoursLogTag={props.deleteHoursLogTag}\n          />\n        </div>\n        <div className=\"time-container\">\n          {props.timeEditable === true ? (\n            <DTP\n              startTime={startTime}\n              stopTime={stopTime}\n              taskName={task.taskName}\n              index={index}\n              modifyHoursLog={props.modifyHoursLog}\n            />\n          ) : (\n            <div\n              onClick={props.retrieveComponentTime}\n              className=\"timer-list-start-end-time mr-2\"\n            >\n              <div\n                className=\"timer-list-start-time mr-1\"\n                data-value={startTime}\n              >\n                {startTime.format(\"lll\")}\n              </div>\n              -\n              <div className=\"timer-list-stop-time ml-1\" data-value={stopTime}>\n                {stopTime.format(\"lll\")}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"total-time-seconds ml-2\">\n          {milisecondsTimeDifference}\n        </div>\n        <div className=\"timer-task-dropdown ml-2\">\n          <TimerTaskDropdown\n            taskName={task.taskName}\n            startTime={log.startTime}\n            deleteHoursLog={props.deleteHoursLog}\n          />\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default timerListComponent;\n","const util = {\n  dateNow: () => new Date().toISOString(),\n  updateLocalStorage: (namespace, storedData) => {\n    localStorage.setItem(namespace, JSON.stringify(storedData));\n  },\n  retrieveTasksFromLocalStorage: namespace =>\n    JSON.parse(localStorage.getItem(namespace))\n};\n\nexport default util;\n","import React from \"react\";\nimport TimerListComponent from \"./timerListComponent\";\nimport { Badge } from \"reactstrap\";\nimport moment from \"moment\";\nimport util from \"../util\";\nimport TagMenu from \"./tagMenu\";\n\nclass TimerTask extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskName: this.props.taskName,\n      isHidden: true,\n      totalTime: this.totalTime(),\n      componentTime: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const savedState = util.retrieveTasksFromLocalStorage(\n      \"timer-task-\" + this.props.task.taskName\n    );\n    if (savedState) {\n      this.setState({\n        taskName: savedState.taskName,\n        totalTime: this.totalTime(),\n        isHidden: savedState.isHidden\n      });\n    }\n  };\n\n  componentDidUpdate = () => {\n    util.updateLocalStorage(\n      \"timer-task-\" + this.props.task.taskName,\n      this.state\n    );\n  };\n\n  toggleList = () => {\n    this.setState({\n      isHidden: !this.state.isHidden\n    });\n  };\n\n  convertMillisecondsToDigitalClock = ms => {\n    const hours = Math.floor(ms / 3600000), // 1 Hour = 36000 Milliseconds\n      minutes = Math.floor((ms % 3600000) / 60000), // 1 Minutes = 60000 Milliseconds\n      seconds = Math.floor(((ms % 360000) % 60000) / 1000); // 1 Second = 1000 Milliseconds\n    // days = Math.floor(ms / 86400000),\n\n    const hoursFormat = () => {\n      if (hours < 10) {\n        return \"000\" + hours;\n      } else if (hours < 100) {\n        return \"00\" + hours;\n      } else if (hours < 1000) {\n        return \"0\" + hours;\n      } else {\n        return hours;\n      }\n    };\n\n    return (\n      hoursFormat() +\n      \":\" +\n      (minutes < 10 ? \"0\" + minutes : minutes) +\n      \":\" +\n      (seconds < 10 ? \"0\" + seconds : seconds)\n    );\n  };\n\n  totalTime = () => {\n    const hoursLog = this.props.task.hoursLog;\n    if (hoursLog.length > 0) {\n      const generateMilisecondsArray = () => {\n        return hoursLog.map(log => {\n          const milisecondsDifference =\n            moment(log.stopTime).valueOf() - moment(log.startTime).valueOf();\n          return milisecondsDifference;\n        });\n      };\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      const totalMiliseconds = generateMilisecondsArray().reduce(reducer);\n      const convertToDigitalClock = this.convertMillisecondsToDigitalClock(\n        totalMiliseconds\n      );\n      return convertToDigitalClock;\n    } else {\n      return \"00:00:00\";\n    }\n  };\n\n  hoursLogSortedDescending = () => {\n    const hoursLog = this.props.task.hoursLog;\n    const sortedDescending = hoursLog.sort(function(a, b) {\n      const startTime = moment(a.startTime).valueOf();\n      const stopTime = moment(b.stopTime).valueOf();\n      return stopTime - startTime;\n    });\n    const slicedSort = sortedDescending.slice(0, 10);\n    return slicedSort;\n    // return sortedDescending\n  };\n\n  retrieveComponentTime = e => {\n    const time = e.target.getAttribute(\"data-value\");\n    const momentTime = moment(parseInt(time));\n    const timeStamp = momentTime.format(\"lll\");\n    this.setState({\n      componentTime: timeStamp\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"timer-task\" id={\"timer-\" + this.props.task.taskName}>\n          <div className=\"timer-task-container\">\n            <Badge\n              className=\"timer-task-badge mr-2\"\n              color=\"info\"\n              onClick={this.toggleList}\n            >\n              {this.props.task.hoursLog.length}\n            </Badge>\n            <div className=\"timer-task-taskname mr-2\">\n              {this.props.task.taskName}\n            </div>\n            <div className=\"timer-task-totaltime mr-2\">\n              {this.state.totalTime ? this.state.totalTime : \"\"}\n            </div>\n            <TagMenu\n              taskName={this.props.task.taskName}\n              tags={this.props.task.tags}\n              startTime={moment(this.props.task.lastUpdated)}\n              createNewTag={this.props.createParentHoursLogTag}\n              deleteHoursLogTag={this.props.deleteParentHoursLogTag}\n            />\n          </div>\n          {!this.state.isHidden ? (\n            <ul className=\"timer-task-ul\">\n              {this.hoursLogSortedDescending().map((log, index) => {\n                return (\n                  <TimerListComponent\n                    key={log.startTime}\n                    log={log}\n                    index={index}\n                    retrieveComponentTime={this.retrieveComponentTime}\n                    timeEditable={\n                      this.state.componentTime ===\n                        moment(log.startTime).format(\"lll\") ||\n                      this.state.componentTime ===\n                        moment(log.stopTime).format(\"lll\")\n                        ? true\n                        : false\n                    }\n                    convertMillisecondsToDigitalClock={\n                      this.convertMillisecondsToDigitalClock\n                    }\n                    task={this.props.task}\n                    modifyHoursLog={this.props.modifyHoursLog}\n                    createChildHoursLogTag={this.props.createChildHoursLogTag}\n                    deleteHoursLog={this.props.deleteHoursLog}\n                    deleteHoursLogTag={this.props.deleteHoursLogTag}\n                  />\n                );\n              })}\n            </ul>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TimerTask;\n","import React from \"react\";\nimport TimerTask from \"./timerTask\";\nimport moment from \"moment\";\n\nclass TimerList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  totalTimeMilliseconds = task => {\n    const hoursLog = task.hoursLog;\n    if (hoursLog.length > 0) {\n      const generateMilisecondsArray = () => {\n        return hoursLog.map(log => {\n          const milisecondsDifference =\n            moment(log.stopTime).valueOf() - moment(log.startTime).valueOf();\n          return milisecondsDifference;\n        });\n      };\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      const totalMiliseconds = generateMilisecondsArray().reduce(reducer);\n      return totalMiliseconds;\n    }\n  };\n\n  sortedTaskList = () => {\n    const taskList = this.props.taskList;\n    const sortedTaskList = taskList.sort((a, b) => {\n      return b.hoursLog.length - a.hoursLog.length;\n    });\n    return sortedTaskList;\n  };\n\n  render() {\n    return (\n      <>\n        {this.sortedTaskList().map(task => {\n          return (\n            <div\n              className=\"parent-timer-list-container\"\n              key={\"timer-list-\" + task.taskName}\n            >\n              <TimerTask\n                key={task.taskName + \"-\" + this.totalTimeMilliseconds(task)}\n                task={task}\n                deleteHoursLog={this.props.deleteHoursLog}\n                createChildHoursLogTag={this.props.createChildHoursLogTag}\n                deleteHoursLogTag={this.props.deleteHoursLogTag}\n                createParentHoursLogTag={this.props.createParentHoursLogTag}\n                deleteParentHoursLogTag={this.props.deleteParentHoursLogTag}\n                modifyHoursLog={this.props.modifyHoursLog}\n              />\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default TimerList;\n","import React from \"react\";\nimport moment from \"moment\";\nimport TagMenu from \"./tagMenu\";\nimport \"./timer.css\";\nimport { Button } from \"reactstrap\";\n\nconst TimerNav = props => {\n  return (\n    <>\n      <input\n        className=\"timer-nav-input mr-3\"\n        id=\"working-on-input\"\n        onChange={props.updateInput}\n        value={props.workingOnInput}\n        placeholder={\"What are you working on?\"}\n      />\n      <div className=\"timer-nav-optional-tag mr-3\">\n        <TagMenu //values in this TagMenu are being utilized in pushTagsFromOptionalTagsArray\n          taskName=\"tbd\"\n          tags={props.optionalTagArray}\n          startTime={moment(1552537388945)}\n          createNewTag={props.createNewTag}\n          deleteHoursLogTag={props.deleteHoursLogTag}\n        />\n      </div>\n      <div className=\"timer-nav-current-timer mr-3\">\n        {props.currentTimer.format(\"HH:mm:ss\")}\n      </div>\n      {!props.timeStarted ? (\n        <Button\n          className=\"start-timer-btn\"\n          size=\"sm\"\n          onClick={props.startTime}\n          color=\"success\"\n        >\n          Start\n        </Button>\n      ) : (\n        <Button\n          className=\"stop-timer-btn\"\n          size=\"sm\"\n          onClick={props.stopTime}\n          color=\"danger\"\n        >\n          Stop\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default TimerNav;\n","import React from \"react\";\nimport moment from \"moment\";\nimport TimerList from \"./timerList\";\nimport TimerNav from \"./timerNav\";\nimport util from \"../util.js\";\nimport \"./timer.css\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\n\n//LeftOff --> figuring out way to utilize callback/promise to createTaskTimeObject after stopTime setsState\n\n//TODO:\n// reset input and time state after stopTime function is complete\n//start time, end time\n//timer for clock utilizing moment add 'moment().add(1, 'second')'\n//calculate difference from start time and current time in seconds\n//rerender clock\n\n//save timer state to local localStorage\n//measure time with set interval or calculate difference in start and end times\n//simulate timer\n//make input field span majority of width\n//add tag icon with dropwdown\n//convert buttons to play and stop icons\n// [ ] timer vs manual mode\n//  [ ] calculate hours in manual mode from start and end time\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      workingOnInput: \"\",\n      optionalTagArray: [],\n      timeStarted: \"\",\n      startTime: \"\",\n      stopTime: \"\",\n      currentTimer: moment().startOf(\"day\"),\n      timer: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const savedState = util.retrieveTasksFromLocalStorage(\"timer-data\");\n    if (savedState) {\n      const timeStarted = savedState.timeStarted\n        ? savedState.timeStarted\n        : false;\n      const {\n        workingOnInput,\n        optionalTagArray,\n        startTime,\n        stopTime,\n        currentTimer\n      } = savedState;\n      this.setState(\n        {\n          timeStarted: timeStarted,\n          workingOnInput,\n          optionalTagArray,\n          startTime,\n          stopTime,\n          //should set currentTimer to moment().startOf(\"day\")Timer, 'second')\n          currentTimer: currentTimer\n            ? this.calculateCurrentTimer(moment(startTime))\n            : moment().startOf(\"day\")\n        },\n        () => {\n          //callback set interval if timer has been started\n          if (this.state.timeStarted) {\n            this.interval = window.setInterval(() => {\n              this.setTimer();\n            }, 1000);\n          }\n        }\n      );\n    }\n  };\n\n  componentDidUpdate = () => {\n    util.updateLocalStorage(\"timer-data\", this.state);\n  };\n\n  calculateCurrentTimer = startTime => {\n    const differenceInMiliseconds = moment().valueOf() - startTime.valueOf();\n    const timeInSeconds = differenceInMiliseconds / 1000;\n    const currentTimer = moment()\n      .startOf(\"day\")\n      .add(timeInSeconds, \"second\");\n    return currentTimer;\n  };\n\n  createOptionalTags = (taskName, tagValue) => {\n    this.setState(currentState => {\n      const optionalTagArray = currentState.optionalTagArray;\n      if (!optionalTagArray.includes(tagValue)) {\n        optionalTagArray.push(tagValue);\n        return {\n          optionalTagArray\n        };\n      }\n    });\n  };\n\n  deleteOptionalTagArray = (taskNameNotRequired, tagValue) => {\n    this.setState(currentState => {\n      const optionalTagArray = currentState.optionalTagArray;\n      const filteredArray = optionalTagArray.filter(tag => {\n        return tag !== tagValue;\n      });\n      return {\n        optionalTagArray: filteredArray\n      };\n    });\n  };\n\n  updateInput = e => {\n    const text = e.target.value;\n    this.setState({\n      workingOnInput: text\n    });\n  };\n\n  toggleTimer = () => {\n    this.setState(prevState => ({\n      timeStarted: !prevState.timeStarted\n    }));\n  };\n\n  setTimer = () => {\n    this.setState(prevState => ({\n      currentTimer: prevState.currentTimer.add(1, \"second\")\n    }));\n  };\n\n  startTime = () => {\n    if (!this.state.workingOnInput) {\n      alert(\"please enter task you are currently working on\");\n    } else {\n      this.toggleTimer();\n      this.setState({\n        startTime: moment()\n      });\n      this.interval = window.setInterval(() => {\n        this.setTimer();\n      }, 1000);\n    }\n  };\n\n  stopTime = () => {\n    this.toggleTimer();\n    this.setState(\n      {\n        stopTime: moment()\n      },\n      () => {\n        this.props.addHoursLog(this.createTaskTimeObject())();\n        this.setState(\n          {\n            //this set state is to ensure new props.taskList is retrieved after addHoursLog has completed\n          },\n          () => {\n            window.clearInterval(this.interval);\n            if (this.state.optionalTagArray.length > 0) {\n              this.pushTagsFromOptionalTagsArray();\n            }\n            this.setState({\n              workingOnInput: \"\",\n              optionalTagArray: []\n            });\n          }\n        );\n      }\n    );\n  };\n\n  pushTagsFromOptionalTagsArray = () => {\n    const taskName = this.state.workingOnInput.trim();\n    const currentTask = this.props.taskList.find(task => {\n      return task.taskName === taskName;\n    });\n    const lastIndex = currentTask.hoursLog.length - 1;\n    this.state.optionalTagArray.map(tagValue => {\n      return this.props.createChildHoursLogTag(taskName, tagValue, lastIndex);\n    });\n  };\n\n  createTaskTimeObject = () => {\n    const taskTimeObject = {\n      taskName: this.state.workingOnInput.trim(),\n      startTime: this.state.startTime,\n      stopTime: this.state.stopTime\n    };\n    this.setState({\n      taskName: \"\",\n      startTime: \"\",\n      stopTime: \"\",\n      currentTimer: moment().startOf(\"day\")\n    });\n    return taskTimeObject;\n  };\n\n  render() {\n    return (\n      <Container key=\"timer1\" className=\"timer-grid\" fluid={true}>\n        <Row>\n          <Col sm={12} className=\"timer-nav_container\">\n            <TimerNav\n              workingOnInput={this.state.workingOnInput}\n              optionalTagArray={this.state.optionalTagArray}\n              currentTimer={this.state.currentTimer}\n              timeStarted={this.state.timeStarted}\n              createNewTag={this.createOptionalTags}\n              updateInput={this.updateInput}\n              deleteHoursLogTag={this.deleteOptionalTagArray}\n              startTime={this.startTime}\n              stopTime={this.stopTime}\n            />\n          </Col>\n          <Col sm={12} className=\"timer-time\">\n            <TimerList\n              taskList={this.props.taskList}\n              deleteHoursLog={this.props.deleteHoursLog}\n              createChildHoursLogTag={this.props.createChildHoursLogTag}\n              deleteHoursLogTag={this.props.deleteHoursLogTag}\n              createParentHoursLogTag={this.props.createParentHoursLogTag}\n              deleteParentHoursLogTag={this.props.deleteParentHoursLogTag}\n              modifyHoursLog={this.props.modifyHoursLog}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport MainNav from \"./mainNav\";\nimport RichEditorExample from \"./myEditor\";\nimport SidePanel from \"../sidepanel/sidePanel\";\nimport DropdownFilter from \"../dropdownFilter/dropdownFilter\";\nimport TaskApp from \"../tasks/taskapp\";\nimport Timer from \"../timer/timer\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"../main.css\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport JSONTree from \"react-json-tree\";\nimport util from \"../util.js\";\nconst uuidv4 = require(\"uuid/v4\");\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggleMainSection: false,\n      inputNewTask: \"\",\n      inputTaskFilter: \"\",\n      subTaskInput: \"\",\n      addNoteInput: \"\",\n      tagInput: \"\",\n      hoursInput: \"\",\n      focusedTask: {},\n      sidePanelFocus: \"\", //set sidepanel focus to taskName\n      taskListIndex: 0, //may want to target by ID instead of index\n      textEditorContentTest: \"testing testing\",\n      taskList: []\n    };\n  }\n\n  componentDidMount = () => {\n    axios\n      .get(\"/getfile\")\n      .then(response => {\n        const taskList = response.data;\n        this.setState({\n          taskListIndex: 0, //may want to store and retrieve preiovus index\n          taskList: taskList ? taskList : []\n          // sidePanelFocus: this.state.taskList[0]\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n    /******* Fallback code utlizing local storage *******/\n    // const taskList = util.retrieveTasksFromLocalStorage('taskList-data')\n    // this.setState({\n    //   taskListIndex: 0, //may want to store and retrieve preiovus index\n    //   taskList: taskList ? taskList : [],\n    //   // sidePanelFocus: this.state.taskList[0]\n    // })\n  };\n\n  componentDidUpdate = () => {\n    axios.post(\"/updatefile\", this.state.taskList).catch(error => {\n      console.log(error);\n    });\n    /******* Fallback code utlizing local storage *******/\n    // util.updateLocalStorage('taskList-data', this.state.taskList)\n    // this.runMoment(this.state.taskList)\n    // this.filterByDateHoursLog()\n  };\n\n  toggleMainSection = e => {\n    e.preventDefault();\n    this.setState(currentState => {\n      return {\n        toggleMainSection: !currentState.toggleMainSection\n      };\n    });\n  };\n\n  //pass in ascending/descending argument\n  sortTaskList = filterBy => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const sortedAscending = taskList.sort((a, b) => {\n        const date1 = moment(a.lastUpdated).valueOf();\n        const date2 = moment(b.lastUpdated).valueOf();\n        if (filterBy === \"ascending\") {\n          return date1 - date2;\n        } else if (filterBy === \"descending\") {\n          return date2 - date1;\n        } else {\n          return date1 - date2;\n        }\n      });\n      return {\n        taskList: sortedAscending\n      };\n    });\n  };\n\n  updateNewTaskInput = e => {\n    const value = e.target.value;\n    this.setState({\n      inputNewTask: value\n    });\n  };\n\n  updateInputTaskFilter = e => {\n    const value = e.target.value;\n    this.setState({\n      inputTaskFilter: value\n    });\n  };\n\n  createNewTask = (taskName, optionalHoursObj) => {\n    this.setState(currentState => {\n      return {\n        inputNewTask: \"\",\n        taskList: currentState.taskList.concat([\n          {\n            taskName,\n            taskId: uuidv4(),\n            tags: [],\n            percentComplete: 25,\n            tasks: [],\n            lastUpdated: util.dateNow(),\n            hours: 0,\n            hoursLog: optionalHoursObj ? [optionalHoursObj] : [],\n            notes: [],\n            textEditorContent: \"Go ahead, write some notes\"\n          }\n        ])\n      };\n    });\n  };\n\n  handleCreateNewTask = e => {\n    e.preventDefault();\n    const taskName = this.state.inputNewTask.trim();\n    if (taskName !== \"\") {\n      this.createNewTask(taskName);\n    }\n  };\n\n  updateTaskTitle = e => {\n    const text = e.target.value;\n    this.setState(currentState => {\n      const taskListIndex = currentState.taskListIndex;\n      const taskList = currentState.taskList;\n      taskList[taskListIndex].taskName = text;\n      return {\n        tasks: taskList\n      };\n    });\n  };\n\n  updateSubTaskInput = e => {\n    e.preventDefault();\n    const value = e.target.value;\n    this.setState({\n      subTaskInput: value\n    });\n  };\n\n  updateAddNoteInput = e => {\n    e.preventDefault();\n    const value = e.target.value;\n    this.setState({\n      addNoteInput: value\n    });\n  };\n\n  updateTaskInput = e => {\n    const taskId = e.target.closest(\"li\").id;\n    const text = e.target.value;\n    this.setState(currentState => {\n      //need to find task in taskList\n      const taskListIndex = currentState.taskListIndex;\n      const taskList = currentState.taskList;\n      const subTasks = taskList[taskListIndex].tasks;\n      const taskIndex = subTasks\n        .map(task => {\n          return task.id;\n        })\n        .indexOf(taskId);\n      subTasks[taskIndex].text = text;\n      return {\n        tasks: subTasks\n      };\n    });\n  };\n\n  updateTagInput = e => {\n    const value = e.target.value;\n    this.setState({\n      tagInput: value\n    });\n  };\n\n  updateHoursInput = e => {\n    const value = e.target.value;\n    this.setState({\n      hoursInput: value\n    });\n  };\n\n  //need to create the tasks under the taskList\n  handleCreateSubTask = e => {\n    e.preventDefault();\n    const text = this.state.subTaskInput.trim();\n    if (text !== \"\") {\n      const taskListIndex = this.state.taskListIndex;\n      const taskList = this.state.taskList;\n      const currentTask = taskList[taskListIndex];\n      //update taskList with new tasks\n      const newTasks = currentTask.tasks.concat([\n        {\n          text,\n          active: true,\n          id: uuidv4()\n        }\n      ]);\n      taskList[taskListIndex].tasks = newTasks;\n      this.setState({\n        subTaskInput: \"\",\n        taskList: taskList\n      });\n    }\n  };\n\n  handleAddNote = taskName => e => {\n    e.preventDefault();\n    console.log(\"handleAddnote\");\n    const text = this.state.addNoteInput.trim();\n    if (text !== \"\") {\n      const textObject = {\n        text,\n        updated: util.dateNow()\n      };\n      const taskListIndex = this.state.taskListIndex;\n      const taskList = this.state.taskList;\n      const currentTask = taskList[taskListIndex];\n      //update taskList with new notes\n      const newNotes = currentTask.notes.concat([textObject]);\n      taskList[taskListIndex].notes = newNotes;\n      this.setState({\n        addNoteInput: \"\",\n        taskList: taskList\n      });\n    }\n  };\n\n  findHoursLog = (taskList, taskName, hoursLogIndex) => {\n    const currentTask = taskList.find(task => {\n      return task.taskName === taskName;\n    });\n    const hoursLog = currentTask.hoursLog[hoursLogIndex];\n    return hoursLog;\n  };\n\n  createChildHoursLogTag = (taskName, tagValue, hoursLogIndex) => {\n    //TODO: find hoursLogIndex utilizing startTime instead of relying on passing index props\n    this.setState(currentState => {\n      const hoursLog = this.findHoursLog(\n        currentState.taskList,\n        taskName,\n        hoursLogIndex\n      );\n      //TODO: is there a better way to handle checking for undefined?\n      if (typeof hoursLog.tags === \"undefined\") {\n        hoursLog.tags = [];\n      }\n      //check if tag exists in array, else push new tagValue\n      if (!hoursLog.tags.includes(tagValue)) {\n        hoursLog.tags.push(tagValue);\n        return {\n          tagInput: \"\",\n          taskList: currentState.taskList\n        };\n      }\n    });\n  };\n\n  modifyHoursLog = (taskName, time, hoursLogIndex) => {\n    const { startTime, stopTime } = time;\n    this.setState(currentState => {\n      const hoursLog = this.findHoursLog(\n        currentState.taskList,\n        taskName,\n        hoursLogIndex\n      );\n      hoursLog.startTime = startTime;\n      hoursLog.stopTime = stopTime;\n      return {\n        tagInput: \"\",\n        taskList: currentState.taskList\n      };\n    });\n  };\n\n  deleteHoursLogTag = (taskName, tagValue, hoursLogIndex) => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const currentTask = taskList.find(task => {\n        return task.taskName === taskName;\n      });\n      const hoursLog = currentTask.hoursLog[hoursLogIndex];\n      const filteredTags = hoursLog.tags.filter(tag => {\n        return tag !== tagValue;\n      });\n      hoursLog.tags = filteredTags;\n      return {\n        taskList\n      };\n    });\n  };\n\n  createParentHoursLogTag = (taskName, tagValue) => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const currentTask = taskList.find(task => {\n        return task.taskName === taskName;\n      });\n      //TODO: is there a better way to handle checking for undefined?\n      if (typeof currentTask.tags === \"undefined\") {\n        currentTask.tags = [];\n      }\n      //check if tag exists in array, else push new tagValue\n      if (!currentTask.tags.includes(tagValue)) {\n        currentTask.tags.push(tagValue);\n        return {\n          tagInput: \"\",\n          taskList: currentState.taskList\n        };\n      }\n    });\n  };\n\n  deleteParentHoursLogTag = (taskName, tagValue) => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const currentTask = taskList.find(task => {\n        return task.taskName === taskName;\n      });\n      const filteredTags = currentTask.tags.filter(tag => {\n        return tag !== tagValue;\n      });\n      currentTask.tags = filteredTags;\n      return {\n        taskList\n      };\n    });\n  };\n\n  handleCreateNewTag = taskName => e => {\n    e.preventDefault();\n    const tagText = this.state.tagInput.trim();\n    if (tagText !== \"\") {\n      this.setState(currentState => {\n        const taskList = currentState.taskList;\n        const currentTask = taskList.find(task => {\n          return task.taskName === taskName;\n        });\n        const taskIndex = taskList\n          .map(task => {\n            return task.taskName;\n          })\n          .indexOf(currentTask.taskName);\n        currentState.taskList[taskIndex].tags.push(tagText);\n        return {\n          tagInput: \"\",\n          taskList: currentState.taskList\n        };\n      });\n    }\n  };\n\n  handleUpdateTextEditor = (taskName, textEditorContent) => {\n    console.log(\"taskName\", taskName);\n    console.log(\"textEditorContent\", textEditorContent);\n\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const currentTask = taskList.find(task => {\n        return task.taskName === taskName;\n      });\n      const taskIndex = taskList\n        .map(task => {\n          return task.taskName;\n        })\n        .indexOf(currentTask.taskName);\n      currentState.taskList[taskIndex].textEditorContent = textEditorContent;\n      return {\n        tagInput: \"\",\n        taskList: currentState.taskList\n      };\n    });\n  };\n\n  deleteHoursLog = (taskName, startTime) => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const taskListItem = taskList.filter(taskListItem => {\n        return taskListItem.taskName === taskName;\n      });\n      const hoursLog = taskListItem[0].hoursLog;\n      const filteredHoursLog = hoursLog.filter(hoursLogItem => {\n        return hoursLogItem.startTime !== startTime;\n      });\n      //find index of taskList item and update state\n      const taskListIndex = taskList\n        .map(task => {\n          return task.taskName;\n        })\n        .indexOf(taskName);\n      taskList[taskListIndex].hoursLog = filteredHoursLog;\n      return { taskList };\n    });\n  };\n\n  addHoursLog = taskTimeObject => e => {\n    //TODO: millisecond conversion for hours from startTime and stopTime\n    const { taskName, startTime, stopTime } = taskTimeObject;\n    const hoursObj = {\n      taskName,\n      tags: [],\n      startTime: startTime,\n      stopTime: stopTime\n    };\n    const currentTask = this.state.taskList.find(task => {\n      return task.taskName === taskName;\n    });\n    //check if task exists, otherwise create a new task\n    //TODO: add hour along with new task\n    if (!currentTask) {\n      this.createNewTask(taskName, hoursObj);\n    } else {\n      this.setState(currentState => {\n        const taskList = currentState.taskList;\n        const currentTask = taskList.find(task => {\n          return task.taskName === taskName;\n        });\n        const taskIndex = taskList\n          .map(task => {\n            return task.taskName;\n          })\n          .indexOf(currentTask.taskName);\n        const hoursLog = currentState.taskList[taskIndex].hoursLog;\n        //check if hoursLog object is defined since some older tasks may not have had this data object\n        if (!hoursLog) {\n          currentState.taskList[taskIndex].hoursLog = [hoursObj];\n        } else {\n          hoursLog.push(hoursObj);\n        }\n        return {\n          hoursInput: \"\",\n          taskList: currentState.taskList\n        };\n      });\n    }\n  };\n\n  handleAddHours = taskName => e => {\n    e.preventDefault();\n    const hours = parseFloat(\n      parseFloat(this.state.hoursInput.trim()).toFixed(2)\n    );\n    var isnum = /^[+]?([0-9]+(?:[.][0-9]*)?|\\.[0-9]+)$/.test(hours); //check to accept positive integers and decimals\n    if (hours !== \"\" && isnum) {\n      this.setState(currentState => {\n        const taskList = currentState.taskList;\n        const currentTask = taskList.find(task => {\n          return task.taskName === taskName;\n        });\n        const taskIndex = taskList\n          .map(task => {\n            return task.taskName;\n          })\n          .indexOf(currentTask.taskName);\n        currentState.taskList[taskIndex].hours += hours;\n        const hoursObj = {\n          hours,\n          updated: util.dateNow()\n        };\n        const hoursLog = currentState.taskList[taskIndex].hoursLog;\n        //check if hoursLog object is defined since some older tasks may not have had this data object\n        if (!hoursLog) {\n          currentState.taskList[taskIndex].hoursLog = [hoursObj];\n        } else {\n          hoursLog.push(hoursObj);\n        }\n        return {\n          hoursInput: \"\",\n          taskList: currentState.taskList\n        };\n      });\n    } else {\n      alert(\"must input numbers only\");\n    }\n  };\n\n  handleDeleteTaskApp = name => {\n    this.setState(currentState => {\n      return {\n        taskList: currentState.taskList.filter(task => {\n          return task.taskName !== name;\n        }),\n        taskListIndex: 0\n      };\n    });\n  };\n\n  handleToggleAll = () => {\n    const tasks = this.state.taskList[this.state.taskListIndex].tasks;\n    const getInactiveCount = () => {\n      let inactiveCounter = 0;\n      tasks.forEach(task => {\n        if (!task.active) {\n          inactiveCounter++;\n        }\n      });\n      return inactiveCounter;\n    };\n    const inactiveCount = getInactiveCount();\n    const setActive = () => {\n      return inactiveCount === tasks.length ? true : false;\n    };\n\n    this.setState(currentState => {\n      const currentTaskList = currentState.taskList;\n      const taskIndex = currentState.taskListIndex;\n      const currentTasks = currentState.taskList[taskIndex].tasks;\n      currentTasks.forEach(task => {\n        task.active = setActive();\n      });\n      currentTaskList[taskIndex].tasks = currentTasks;\n      return {\n        taskList: currentTaskList\n      };\n    });\n  };\n\n  handleToggleTask = taskId => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const taskIndex = currentState.taskListIndex;\n      const currentSubTask =\n        currentState.taskList[currentState.taskListIndex].tasks;\n      const subTaskIndex = currentSubTask\n        .map(function(task) {\n          return task.id;\n        })\n        .indexOf(taskId);\n      const subTask = taskList[taskIndex].tasks[subTaskIndex];\n      subTask.active = !subTask.active;\n      return {\n        taskList: taskList\n      };\n    });\n  };\n\n  handleDeleteSubTask = text => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const taskIndex = [currentState.taskListIndex];\n      const tasks = currentState.taskList[currentState.taskListIndex].tasks;\n      taskList[taskIndex].tasks = tasks.filter(task => task.text !== text);\n      return {\n        taskList: taskList\n      };\n    });\n  };\n\n  handleDeleteAllTasks = () => {\n    this.setState(currentState => {\n      const taskList = currentState.taskList;\n      const taskIndex = [currentState.taskListIndex];\n      const tasks = currentState.taskList[currentState.taskListIndex].tasks;\n      taskList[taskIndex].tasks = tasks.filter(task => task.active === true);\n      return {\n        taskList: taskList\n      };\n    });\n  };\n\n  handleFocusTask = e => {\n    const taskId = e.target.closest(\"li\").id;\n    this.setState(currentState => {\n      return {\n        focusedTask: currentState.taskList[this.state.taskListIndex].tasks.find(\n          task => {\n            return task.id === taskId;\n          }\n        )\n      };\n    });\n  };\n\n  sidePanelFocus = e => {\n    // e.preventDefault()\n    const taskName = e.target\n      .closest(\".task-item\")\n      .getAttribute(\"data-sidepanelid\");\n    const taskListIndex = this.state.taskList\n      .map(task => {\n        return task.taskName;\n      })\n      .indexOf(taskName);\n    this.setState(currentState => {\n      return {\n        taskListIndex: taskListIndex === -1 ? 0 : taskListIndex,\n        sidePanelFocus: currentState.taskList.find(task => {\n          return task.taskName === taskName;\n        })\n      };\n    });\n  };\n\n  filterByTaskName = (taskList, taskName) => {\n    if (!taskName) {\n      return taskList;\n    } else {\n      return taskList.filter(task => {\n        return task.taskName === taskName;\n      });\n    }\n  };\n\n  runMoment = taskList => {\n    //iterrate over taskList and create hoursLog object for specific days\n    const filterByDate = (arr, date) => {\n      return arr.filter(hoursLog => {\n        const format = \"MMM Do YYYY\";\n        return moment(hoursLog.updated).format(format) === date;\n      });\n    };\n\n    const filterByDateHoursLog = () => {\n      const calculatedHoursByDay = [];\n      taskList.forEach(arr => {\n        const taskName = arr.taskName;\n        const hoursLog = arr.hoursLog;\n        const date = moment(\"2019-02-19T23:20:55-08:00\").format(\"MMM Do YYYY\");\n        console.log(\"date\", date);\n        const filteredHoursByDay = filterByDate(hoursLog, date);\n        const hoursObj = {\n          taskName,\n          filteredHoursByDay,\n          date\n        };\n        calculatedHoursByDay.push(hoursObj);\n      });\n      return calculatedHoursByDay;\n    };\n\n    const addHours = arr => {\n      let totalHours = 0;\n      arr.forEach(item => {\n        totalHours += item.hours;\n      });\n      return totalHours;\n    };\n\n    const addUpHours = () => {\n      const totalHoursByDate = filterByDateHoursLog().map(arr => {\n        const taskName = arr.taskName;\n        const totalHours = addHours(arr.filteredHoursByDay);\n        const date = arr.date;\n        return {\n          taskName,\n          totalHours,\n          date\n        };\n      });\n      return totalHoursByDate;\n    };\n    // console.log('filterByDateHoursLog: ', filterByDateHoursLog())\n    // console.log('addUpHours', addUpHours())\n  };\n\n  render() {\n    return (\n      <Container className=\"main-grid\" fluid={true}>\n        <MainNav />\n        <Timer\n          addHoursLog={this.addHoursLog}\n          taskList={this.state.taskList}\n          modifyHoursLog={this.modifyHoursLog}\n          deleteHoursLog={this.deleteHoursLog}\n          createChildHoursLogTag={this.createChildHoursLogTag}\n          deleteHoursLogTag={this.deleteHoursLogTag}\n          createParentHoursLogTag={this.createParentHoursLogTag}\n          deleteParentHoursLogTag={this.deleteParentHoursLogTag}\n        />\n\n        <button onClick={this.toggleMainSection}>Toggle Main Section</button>\n        {this.state.toggleMainSection ? (\n          <Row className=\"show-grid main-display\">\n            <Col xs={12} sm={3} md={3} className=\"sidenav\">\n              <DropdownFilter sortFilter={this.sortTaskList} />\n              <div className=\"side-panel\">\n                <form onSubmit={this.handleCreateNewTask}>\n                  <input\n                    onChange={this.updateNewTaskInput}\n                    id=\"task-text\"\n                    value={this.state.inputNewTask}\n                    placeholder=\"create new task\"\n                  />\n                  <input type=\"submit\" value=\"submit\" />\n                </form>\n                <input\n                  onChange={this.updateInputTaskFilter}\n                  id=\"task-filter\"\n                  value={this.state.inputTaskFilter}\n                  placeholder=\"filter by task name\"\n                />\n                <h4>Activities & Tasks</h4>\n                {this.filterByTaskName(\n                  this.state.taskList,\n                  this.state.inputTaskFilter\n                ).map((task, index) => {\n                  return (\n                    <div key={uuidv4()}>\n                      <SidePanel\n                        className={\n                          this.state.taskListIndex === index\n                            ? \"side-panel-active\"\n                            : \"\"\n                        }\n                        task={task}\n                        sidePanelFocus={this.sidePanelFocus}\n                        onHandleDeleteTask={() =>\n                          this.handleDeleteTaskApp(task.taskName)\n                        }\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </Col>\n            <Col xs={12} sm={9} md={9} className=\"task-center\">\n              {typeof this.state.taskList[0] !== \"undefined\" ? (\n                <TaskApp\n                  taskInfo={\n                    this.state.taskListIndex !== \"\"\n                      ? this.state.taskList[this.state.taskListIndex]\n                      : this.state.taskList[0]\n                  }\n                  appState={this.state}\n                  tasks={this.state.taskList[this.state.taskListIndex].tasks}\n                  updateTaskTitle={this.updateTaskTitle}\n                  textEditorContent={\n                    this.state.taskList[this.state.taskListIndex]\n                      .textEditorContent\n                  }\n                  subTaskInput={this.state.subTaskInput}\n                  updateSubTaskInput={this.updateSubTaskInput}\n                  handleCreateSubTask={this.handleCreateSubTask}\n                  handleDeleteSubTask={this.handleDeleteSubTask}\n                  tagInput={this.state.tagInput}\n                  updateTagInput={this.updateTagInput}\n                  handleCreateNewTag={this.handleCreateNewTag}\n                  hoursInput={this.state.hoursInput}\n                  updateHoursInput={this.updateHoursInput}\n                  handleAddHours={this.handleAddHours}\n                  updateAddNoteInput={this.updateAddNoteInput}\n                  handleAddNote={this.handleAddNote}\n                  handleToggleAll={this.handleToggleAll}\n                  handleDeleteAllTasks={this.handleDeleteAllTasks}\n                  handleDeleteTaskApp={() =>\n                    this.handleDeleteTaskApp(this.state.sidePanelFocus.taskName)\n                  }\n                  handleToggleTask={this.handleToggleTask}\n                  handleFocusTask={this.handleFocusTask}\n                  handleUpdateTextEditor={this.handleUpdateTextEditor}\n                  focusedTask={this.state.focusedTask}\n                  updateTaskInput={this.updateTaskInput}\n                  taskListIndex={this.state.taskListIndex}\n                />\n              ) : (\n                <h1>Add a task and click on task in the left panel</h1>\n              )}\n            </Col>\n          </Row>\n        ) : null}\n        <JSONTree data={this.state} shouldExpandNode={() => false} />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./bootcamp/App.css\";\nimport Main from \"./taskapp/main/main.js\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      // Must wrap in BrowserRouter to utlize react-router-dom\n      <BrowserRouter>\n        <div>\n          <Route path={process.env.PUBLIC_URL + \"/\"} component={Main} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}